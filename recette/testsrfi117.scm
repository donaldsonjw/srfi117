(module testsrfi117
   (library srfi117 btest)
   (main main))


(define-test-suite srfi117-tests  
   (test "list-queues/simple"
      (define x (list-queue 1 2 3))
      (define x1 (list 1 2 3))
      (define x2 (make-list-queue x1 (cddr x1)))
      (define y (list-queue 4 5))
      (define z (list-queue-append x y))
      (define z2 (list-queue-append! (list-queue-copy x) (list-queue-copy y)))
      (assert-equal? '(1 1 1) (list-queue-list (make-list-queue '(1 1 1))))
      (assert-equal? '(1 2 3) (list-queue-list x))
      (assert-equal? 3 (list-queue-back x2))
      (assert-true (list-queue? y))
      (assert-equal? '(1 2 3 4 5) (list-queue-list z))
      (assert-equal? '(1 2 3 4 5) (list-queue-list z2))
      (assert-equal? 1 (list-queue-front z))
      (assert-equal? 5 (list-queue-back z))
      (list-queue-remove-front! y)
      (assert-equal? '(5) (list-queue-list y))
      (list-queue-remove-back! y)
      (assert-true (list-queue-empty? y))
      (assert-exception-thrown (list-queue-remove-front! y) &error)
      (assert-exception-thrown (list-queue-remove-back! y) &error)
      (assert-equal? '(1 2 3 4 5) (list-queue-list z))
      (assert-equal? '(1 2 3 4 5) (list-queue-remove-all! z2))
      (assert-true (list-queue-empty? z2))
      (list-queue-remove-all! z)
      (list-queue-add-front! z 1)
      (list-queue-add-front! z 0)
      (list-queue-add-back! z 2)
      (list-queue-add-back! z 3)
      (assert-equal? '(0 1 2 3) (list-queue-list z)))

   (test "list-queues/whole"
      (define a (list-queue 1 2 3))
      (define b (list-queue-copy a))
      (assert-equal? '(1 2 3) (list-queue-list b))
      (list-queue-add-front! b 0)
      (assert-equal? '(1 2 3) (list-queue-list a))
      (assert-equal? 4 (length (list-queue-list b)))
      (let ((c (list-queue-concatenate (list a b))))
         (assert-equal? '(1 2 3 0 1 2 3) (list-queue-list c))))

   (test "list-queues/map"
      (define r (list-queue 1 2 3))
      (define s (list-queue-map (lambda (x) (* x 10)) r))
      (assert-equal? '(10 20 30) (list-queue-list s))
      (list-queue-map! (lambda (x) (+ x 1)) r)
      (assert-equal? '(2 3 4) (list-queue-list r))
      (define sum 0)
      (list-queue-for-each (lambda (x) (set! sum (+ sum x))) s)
      (assert-equal? 60 sum))

   (test  "list-queues/conversion"
      (define n (list-queue 5 6))
      (list-queue-set-list! n (list 1 2))
      (assert-equal? '(1 2) (list-queue-list n))
      (define d (list 1 2 3))
      (define e (cddr d))
      (define f (make-list-queue d e))
      (receive (dx ex) (list-queue-first-last f)
               (assert-true (eq? d dx))
               (assert-true (eq? e ex))
               (assert-equal? '(1 2 3) (list-queue-list f))
               (list-queue-add-front! f 0)
               (list-queue-add-back! f 4)
               (assert-equal? '(0 1 2 3 4) (list-queue-list f))
               (define g (make-list-queue d e))
               (assert-equal? '(1 2 3 4) (list-queue-list g))
               (define h (list-queue 5 6))
               (list-queue-set-list! h d e)
               (assert-equal? '(1 2 3 4) (list-queue-list h))))
   
   (test "list-queues/unfold"
      (define (double x) (* x 2))
      (define (done? x) (> x 3))
      (define (add1 x) (+ x 1))
      (define x (list-queue-unfold done? double add1 0))
      (assert-equal? '(0 2 4 6) (list-queue-list x))
      (define y (list-queue-unfold-right done? double add1 0))
      (assert-equal? '(6 4 2 0) (list-queue-list y))
      (define x0 (list-queue 8))
      (define x1 (list-queue-unfold done? double add1 0 x0))
      (assert-equal? '(0 2 4 6 8) (list-queue-list x1))
      (define y0 (list-queue 8))
      (define y1 (list-queue-unfold-right done? double add1 0 y0))
      (assert-equal? '(8 6 4 2 0) (list-queue-list y1)))
   )


(define (main args)
   (let ((tr (instantiate::terminal-test-runner (suite srfi117-tests))))
      (if (test-runner-execute tr #t) 0 -1)))


